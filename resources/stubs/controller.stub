<?php

namespace App\Http\Controllers\Manage;

use Illuminate\Contracts\Foundation\Application;
use App\Http\Requests\Update{{Name}}Request;
use App\Http\Requests\Store{{Name}}Request;
use Yajra\DataTables\Facades\DataTables;
use App\Http\Controllers\BaseController;
use Illuminate\Contracts\View\Factory;
use Illuminate\Contracts\View\View;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Response;
use Illuminate\Http\Request;
use App\Models\{{Name}};


class {{Name}}Controller extends BaseController
{
//    public function __construct()
//    {
//        // Permissions
//        $this->middleware('permission:{{names}}-read', ['only' => ['index', 'show']]);
//        $this->middleware('permission:{{names}}-create', ['only' => ['create', 'store']]);
//        $this->middleware('permission:{{names}}-update', ['only' => ['edit', 'update']]);
//        $this->middleware('permission:{{names}}-delete', ['only' => ['destroy', 'forceDelete']]);
//    }

    /**
     * Display a listing of the resource.
     *
     * @param Request $request
     * @return Application|Factory|View
     * @throws \Exception
     */
    public function index(Request $request)
    {
        if ($request->ajax()) {
            ${{names}} = {{Name}}::get();
            return DataTables::of(${{names}})->make(true);
        }
        return view('manage.pages.{{names}}.index');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param Store{{Name}}Request $request
     * @return JsonResponse
     */
    public function store(Store{{Name}}Request $request): JsonResponse
    {
        try {
            // Create new {{name}}
            ${{name}} = {{Name}}::create($request->validated());
            return $this->responseJson(true, __('messages.create_success'),'', 200);
        }
        catch (\Exception $e) {
            return $this->responseJsonError(__('messages.create_error'), $e->getMessage());
        }
    }

    /**
     * Display the specified resource.
     *
     * @param {{Name}} ${{name}}
     * @return Response
     */
    public function show({{Name}} ${{name}})
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param {{Name}} ${{name}}
     * @return JsonResponse
     */
    public function edit({{Name}} ${{name}}): JsonResponse
    {
        try {
            return $this->responseJson(true, __('messages.data_retrieved_successfully'), ${{name}}, Response::HTTP_OK);
        } catch (\Exception $e) {
            return $this->responseJsonError(__('messages.data_retrieved_error'), $e->getMessage());
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param Update{{Name}}Request $request
     * @param {{Name}} ${{name}}
     * @return JsonResponse
     */
    public function update(Update{{Name}}Request $request, {{Name}} ${{name}}): JsonResponse
    {
        try {
            // Update author
            ${{name}}->update($request->validated());
            return $this->responseJson(true, __('messages.update_success'), ${{name}}, 200);
        }
        catch (\Exception $e) {
            return $this->responseJsonError(__('messages.update_error'), $e->getMessage());
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param {{Name}} ${{name}}
     * @return JsonResponse
     */
    public function destroy({{Name}} ${{name}})
    {
        try {
            // Delete {{name}}
            ${{name}}->delete();
            return $this->responseJson(true, __('messages.delete_success'));
        }
        catch (\Exception $e) {
            return $this->responseJsonError(__('messages.delete_error'), $e->getMessage());
        }
    }
}
